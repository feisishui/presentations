<?xml version="1.0" encoding="UTF-8"?><snippets><snippet name="defines"><![CDATA[
	#ifdef GL_ES
  precision highp float;
  #endif
	
	#define Epsilon 		1e-6
	#define PI 					3.14159265358979323846264338327950288
	#define InvalidFlag	-9999.0
	#define degPerRad 	57.295779513082320
  #define radPerDeg 	0.017453292519943

	float deg2rad(float deg) {
	  return deg * PI / 180.0;
	}

	float rad2deg(float rad) {
	  return rad * 180.0 / PI;
	}
	
]]></snippet><snippet name="linearInterpolator"><![CDATA[
	float getLinearValue(vec2 minMaxValue, float curValue) {
		if (minMaxValue[1] == minMaxValue[0])
			return 0.0;
		else {
			return (curValue-minMaxValue[0]) / (minMaxValue[1]-minMaxValue[0]);
			//return (curValue + 50.0) / 10000.0;
		}
	}
	
]]></snippet><snippet name="lonlatDistance"><![CDATA[
	$defines

	uniform float earthRadius;

	// from: http://www.movable-type.co.uk/scripts/latlong.html
	float getDistanceOfTwoLonLat(vec2 lonlatA, vec2 lonlatB)
  {
  	float latA = deg2rad(lonlatA.y);
  	float latB = deg2rad(lonlatB.y);

		float dLat = deg2rad(lonlatB.y-lonlatA.y);
		float dLon = deg2rad(lonlatB.x-lonlatA.x);

		float a = sin(dLat/2.0) * sin(dLat/2.0) +
		        cos(latA) * cos(latB) *
		        sin(dLon/2.0) * sin(dLon/2.0);
		float c = 2.0 * atan2(sqrt(a), sqrt(1.0-a));
		return earthRadius * c;
  }
]]></snippet><snippet name="float2rgba"><![CDATA[
	vec4 float2rgba(float v)
  {
    float v0 = floor(v * 256.0)/255.0;
    float v1 = floor(fract(v * 256.0) * 256.0)/255.0;
    float v2 = floor(fract(v * 65536.0) * 256.0)/255.0;
    float v3 = 1.0;
    return vec4(v0, v1, v2, v3);
  }
]]></snippet><snippet name="getHSVColor"><![CDATA[
	vec4 getHSVColor(float H, float S, float V) {
	  vec3 colorVec = vec3(1.0, 1.0, 0.0);
	  float hf = H / 60.0;
	  float i  = floor( hf );
	  float f  = hf - i;
	  float pv  = V * ( 1.0 - S );
	  float qv  = V * ( 1.0 - S * f );
	  float tv  = V * ( 1.0 - S * ( 1.0 - f ) );
	  if (i < 0.5) 
	    colorVec = vec3(V, tv, pv);
	  else if (i < 1.5)
	    colorVec = vec3(qv, V, pv);
	  else if (i < 2.5)
	    colorVec = vec3(pv, V, tv);
	  else if (i < 3.5)
	    colorVec = vec3(pv, qv, V);
	  else if (i < 4.5)
	    colorVec = vec3(tv, pv, V);
	  else
	    colorVec = vec3(V, pv, qv);
	  return vec4(colorVec, 0.7);
	}
]]></snippet><snippet name="convertHSLtoRGB"><![CDATA[
	vec4 convertHSLtoRGB( vec4 col )
	{
    const float onethird = 1.0 / 3.0;
    const float twothird = 2.0 / 3.0;
    const float rcpsixth = 6.0;

    float hue = col.x;
    float sat = col.y;
    float lum = col.z;

    vec3 xt = vec3(
        rcpsixth * (hue - twothird),
        0.0,
        rcpsixth * (1.0 - hue)
    );

    if (hue < twothird) {
        xt.r = 0.0;
        xt.g = rcpsixth * (twothird - hue);
        xt.b = rcpsixth * (hue      - onethird);
    }

    if (hue < onethird) {
        xt.r = rcpsixth * (onethird - hue);
        xt.g = rcpsixth * hue;
        xt.b = 0.0;
    }

    xt = min( xt, 1.0 );

    float sat2   =  2.0 * sat;
    float satinv =  1.0 - sat;
    float luminv =  1.0 - lum;
    float lum2m1 = (2.0 * lum) - 1.0;
    vec3  ct     = (sat2 * xt) + satinv;

    vec3 rgb;
    if (lum >= 0.5)
         rgb = (luminv * ct) + lum2m1;
    else rgb =  lum    * ct;

    return vec4( rgb, col.a );
	}
]]></snippet><snippet name="lonlat2position"><![CDATA[
	$defines

	uniform float earthRadius;

	vec3 lonlat2position(vec3 lonlat) {
	  float lon = deg2rad(lonlat.x);
	  float lat = deg2rad(lonlat.y);

	  float cosLat = cos(lat);
	  float h = earthRadius + lonlat.z;
	  float x = cos(lon) * cosLat * h;
	  float y = sin(lon) * cosLat * h;
	  float z = sin(lat) * h;
	  return vec3(x, y, z);
	}

	mat4 toRotationMat(mat4 transMat) {
		mat4 res = mat4(1.0);
		res[0] = transMat[0];
		res[1] = transMat[1];
		res[2] = transMat[2];
		return res;
	}
]]></snippet><snippet name="rotateFromToMat"><![CDATA[
	mat4 rotateFromTo(vec3 from, vec3 to) {
		mat4 result = mat4(1.0);
		vec3 fromN = normalize(from);
		vec3 toN = normalize(to);
		float c = dot(fromN, toN);
		float s = sqrt(1.0 - c*c);
		float t = 1.0 - c;

		vec3 axis = cross(fromN, toN);
		axis = normalize(axis);
		float x = axis.x, y = axis.y, z = axis.z;

		float a00 = result[0].x, a01 = result[0].y, a02 = result[0].z, a03 = result[0].w,
    a10 = result[1].x, a11 = result[1].y, a12 = result[1].z, a13 = result[1].w,
    a20 = result[2].x, a21 = result[2].y, a22 = result[2].z, a23 = result[2].w;

		float b00 = x * x * t + c, b01 = y * x * t + z * s, b02 = z * x * t - y * s,
    b10 = x * y * t - z * s, b11 = y * y * t + c, b12 = z * y * t + x * s,
    b20 = x * z * t + y * s, b21 = y * z * t - x * s, b22 = z * z * t + c;
		
		result[0].x = a00 * b00 + a10 * b01 + a20 * b02;
    result[0].y = a01 * b00 + a11 * b01 + a21 * b02;
    result[0].z = a02 * b00 + a12 * b01 + a22 * b02;
    result[0].w = a03 * b00 + a13 * b01 + a23 * b02;

    result[1].x = a00 * b10 + a10 * b11 + a20 * b12;
    result[1].y = a01 * b10 + a11 * b11 + a21 * b12;
    result[1].z = a02 * b10 + a12 * b11 + a22 * b12;
    result[1].w = a03 * b10 + a13 * b11 + a23 * b12;

    result[2].x = a00 * b20 + a10 * b21 + a20 * b22;
    result[2].y = a01 * b20 + a11 * b21 + a21 * b22;
    result[2].z = a02 * b20 + a12 * b21 + a22 * b22;
    result[2].w = a03 * b20 + a13 * b21 + a23 * b22;

    return result;
	}
]]></snippet><snippet name="translationMat"><![CDATA[
	$lonlat2position

	mat4 rotateX(mat4 mat, float angle) {
		mat4 res = mat;

	  float s = sin(angle);
	  float c = cos(angle);
	  float a10 = mat[1].x, a11 = mat[1].y, a12 = mat[1].z,
	  a13 = mat[1].w, a20 = mat[2].x, a21 = mat[2].y,
	  a22 = mat[2].z, a23 = mat[2].w;

	  res[1].x = a10 * c + a20 * s;
	  res[1].y = a11 * c + a21 * s;
	  res[1].z = a12 * c + a22 * s;
	  res[1].w = a13 * c + a23 * s;

	  res[2].x = a10 * (-s) + a20 * c;
	  res[2].y = a11 * (-s) + a21 * c;
	  res[2].z = a12 * (-s) + a22 * c;
	  res[2].w = a13 * (-s) + a23 * c;

	  return res;
	}

	mat4 rotateY(mat4 mat, float angle) {
		mat4 res = mat;

	  float s = sin(angle);
	  float c = cos(angle);
	  float a00 = mat[0].x, a01 = mat[0].y, a02 = mat[0].z,
	  a03 = mat[0].w, a20 = mat[2].x, a21 = mat[2].y,
	  a22 = mat[2].z, a23 = mat[2].w;

	  res[0].x = a00 * c + a20 * (-s);
	  res[0].y = a01 * c + a21 * (-s);
	  res[0].z = a02 * c + a22 * (-s);
	  res[0].w = a03 * c + a23 * (-s);

	  res[2].x = a00 * s + a20 * c;
	  res[2].y = a01 * s + a21 * c;
	  res[2].z = a02 * s + a22 * c;
	  res[2].w = a03 * s + a23 * c;

	  return res;
	}

	mat4 getTransMat(vec3 lonlat) {
	  mat4 m = mat4(1.0);

	  float lonRad = deg2rad(lonlat.x);
	  float latRad = deg2rad(lonlat.y);
    float sinLon = sin(lonRad), cosLon = cos(lonRad),
      		sinLat = sin(latRad), cosLat = cos(latRad);

    m[0].x = -sinLon; m[1].x = -sinLat*cosLon; m[2].x = cosLat*cosLon;
    m[0].y =  cosLon; m[1].y = -sinLat*sinLon; m[2].y = cosLat*sinLon;
    m[0].z = 0.0;     m[1].z =  cosLat;        m[2].z = sinLat;
    m[0].w = 0.0;     m[1].w = 0.0;            m[2].w = 0.0;

    m[3].xyz = lonlat2position(lonlat);
    m[3].w = 1.0;

	  return m;
	}

	vec3 rotateOnAxis(vec3 axis, float angle, vec3 srcVec) {
		vec3 dest;

		float halfAngle = angle * 0.5;
    float s = sin(halfAngle);
    float qw = cos(halfAngle);
    float qx = s * axis[0];
    float qy = s * axis[1];
    float qz = s * axis[2];

    float x = srcVec[0], y = srcVec[1], z = srcVec[2];

    // calculate quat * vec
    float ix = qw * x + qy * z - qz * y,
    	    iy = qw * y + qz * x - qx * z,
          iz = qw * z + qx * y - qy * x,
          iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;

    return dest;
	}
]]></snippet><snippet name="directionLight"><![CDATA[
	const vec3 diffuseColor = vec3(0.8, 0.8, 0.8);
  const vec3 ambientColor = vec3(0.1, 0.1, 0.1);
  const vec3 specularColor = vec3(0.2, 0.2, 0.2);

  void main() {
    float lambertian = clamp(dot(vTransNormal, lightDirection), 0.0, 1.0);
    vec3 viewDir = normalize(camPos-vPos);
    vec3 halfLE = normalize(lightDirection + viewDir);
    float specAngle = clamp(dot(vTransNormal, halfLE), 0.0, 1.0);
    float specular = pow(specAngle, 30.0);
    vec3 lightVec = vec3(ambientColor + lambertian * diffuseColor + specular * specularColor);
]]></snippet><snippet name="expoEaseOut"><![CDATA[
	float getExpoEaseOutValue(float t, float startV, float endV, float duration) {
    float changedV = endV - startV;
    return (abs(t-duration) < Epsilon) ? endV : (changedV * (-pow(2.0, -10.0*t/duration)+1.0) + startV);
  }

	float getExpoEaseInValue(float t, float startV, float endV, float duration) {
    float changedV = endV - startV;
    return (abs(t) < Epsilon) ? startV : (changedV * pow(2.0, 10.0*(t/duration-1.0)) + startV);
  }
]]></snippet><snippet name="circEaseOut"><![CDATA[
	float getCircEaseOutValue(float t, float startV, float endV, float duration) {
    float changedV = endV - startV;
    float newT = t/duration - 1.0;
    return changedV * sqrt(1.0 - newT*newT) + startV;
  }
]]></snippet><snippet name="cubicEaseOut"><![CDATA[
	float getCubicEaseInOutValue(float t, float startV, float endV, float duration) {
    float changedV = endV - startV;
    if ((t/=duration/2.0) < 1.0)
      return changedV/2.0*pow(t, 3.0) + startV;
    
    return changedV/2.0 * ((t-=2.0)*pow(t, 2.0) + 2.0) + startV;
  }
]]></snippet><snippet name="quintEaseOut"><![CDATA[
	float getQuintEaseInOutValue(float t, float startV, float endV, float duration) {
    float changedV = endV - startV;
    if ((t/=duration/2.0) < 1.0)
      return changedV/2.0*pow(t, 5.0) + startV;
    
    return changedV/2.0 * ((t-=2.0)*pow(t, 4.0) + 2.0) + startV;
  }
]]></snippet><snippet name="backEaseIn"><![CDATA[
	float getBackEaseInValue(float t, float startV, float endV, float duration) {
    float changedV = endV - startV;
    float s = 1.70158;
    float newT = t/duration;
    return changedV * (newT*newT)*((s+1.0)*newT-s) + startV;
  }
]]></snippet><snippet name="elasticEaseIn"><![CDATA[
	float getElasticEaseInValue(float t, float startV, float endV, float duration) {
    float changedV = endV - startV;
    float p = duration * 0.3;
    float a = changedV;
    float s = p / 4.0;
    float newT = t - 1.0;
    return -(a*pow(2.0, 10.0*newT) * sin((newT*duration-s)*(2.0*PI)/p)) + startV;
  }
]]></snippet><snippet name="bounceEaseOut"><![CDATA[
	float getBounceEaseOutValue(float t, float startV, float endV, float duration) {
    float changedV = endV - startV;
    if ((t /= duration) < (1.0/2.75))
      return changedV * (7.5625*t*t) + startV;
    else if (t < (2.0/2.75))
      return changedV*(7.5625*(t-=(1.5/2.75))*t + 0.75) + startV;
    else if (t < (2.5/2.75))
      return changedV*(7.5625*(t-=(2.25/2.75))*t + 0.9375) + startV;
    else
      return changedV*(7.5625*(t-=(2.625/2.75))*t + 0.984375) + startV;
  }

  float getBounceEaseInValue(float t, float startV, float endV, float duration) {
    return endV - getBounceEaseOutValue(duration-t, 0.0, endV, duration) + startV;
  }
]]></snippet><snippet name="quadVS"><![CDATA[
	attribute vec2 $auxpos1;
  attribute vec2 $auxpos2;

  varying vec2 texCoord;

  void main(void) {
  	texCoord = $auxpos2;
  	gl_Position = vec4($auxpos1, 0.0, 1.0);
  }
]]></snippet><snippet name="quadFS"><![CDATA[
	#ifdef GL_ES
  precision highp float;
  #endif

  uniform sampler2D quadTex;
  
  varying vec2 texCoord;
  
  void main(void) {
     gl_FragColor = texture2D(quadTex, texCoord);
  }
]]></snippet><snippet name="packDepth"><![CDATA[
	#ifdef GL_ES
  precision highp float;
  #endif

  vec4 packDepth(const in highp float depth) {
	  const highp vec4 bit_shift = vec4(256.0, 256.0*256.0, 256.0*256.0*256.0, 256.0*256.0*256.0*256.0);
	  vec4 res = depth * bit_shift;
	  res.x = min(res.x + 1.0, 255.0);
	  res = fract(floor(res) / 256.0);
	  return res;
	}
]]></snippet></snippets>